import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import {
  Container,
  Heading,
  Paragraph,
  Flex,
  Input,
  Box,
  Link,
} from "theme-ui";

import { GetStaticProps, GetStaticPropsContext } from "next";

type HomeProps = {
  hashRate: number;
  totalSupply: number;
};

const Home: NextPage<HomeProps> = (props) => {
  const [btc, setBtc] = useState(100);

  const [hashRate, setHashRate] = useState(props.hashRate);

  const [lostCoins, setLostCoins] = useState(3000000);

  const fractionOfSupply = btc / (props.totalSupply - lostCoins);
  const percentOfSupply = fractionOfSupply * 100;
  return (
    <>
      <Head>
        <title>Green your Bitcoin</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Heading
        sx={{
          color: "primary",
          fontFamily: "heading",
          fontSize: "40px",
          my: "5rem",
        }}
      >
        Green your Bitcoin
      </Heading>
      {/* <Paragraph sx={{ pb: 20 }}>
        This is a demo, the calculations are not yet accurate
      </Paragraph> */}
      <Paragraph sx={{ my: 20 }}>
        What is this? Read the{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="https://www.resistance.money/green/"
        >
          white paper
        </Link>{" "}
        at resistance.money to learn more.
      </Paragraph>
      <Paragraph>Your BTC holdings:</Paragraph>
      <Flex sx={{ alignItems: "center", mb: 20 }}>
        <Input
          sx={{
            width: 200,
          }}
          min={0}
          max={props.totalSupply}
          type="number"
          value={btc}
          onChange={(e) => setBtc(parseFloat(e.currentTarget.value))}
        />
        <Paragraph ml={10}>BTC</Paragraph>
      </Flex>
      <Flex sx={{ mb: 20 }}>
        <Box sx={{ mr: 20 }}>
          <Paragraph>Total BTC supply:</Paragraph>
          <Paragraph>{props.totalSupply.toLocaleString()}</Paragraph>
        </Box>
        <Box>
          <Paragraph>Coins assumed lost:</Paragraph>
          <Paragraph>{lostCoins.toLocaleString()}</Paragraph>
        </Box>
      </Flex>
      <Paragraph>Effective total BTC supply:</Paragraph>
      <Heading sx={{ mb: 20 }}>
        {(props.totalSupply - lostCoins).toLocaleString()}
      </Heading>
      <Paragraph>Of which you hold:</Paragraph>
      <Heading sx={{ mb: 20 }}>
        <b>{percentOfSupply}%</b>
      </Heading>

      <Paragraph>Current global hashrate:</Paragraph>
      <Heading>{props.hashRate.toLocaleString()} TH/s</Heading>
      <Paragraph sx={{ mt: 20 }}>Your holdings incentivise:</Paragraph>
      <Heading>
        <b>{(hashRate * fractionOfSupply).toLocaleString()}</b> TH/s
      </Heading>
      <Paragraph>
        Or {((hashRate * fractionOfSupply) / 110).toFixed(1)} Antminer s19 Pros
        at 110 TH/s
      </Paragraph>
      <Paragraph sx={{ mt: 20 }}>
        To ensure your BTC holdings are carbon neutral you can mine this amount
        or more with renewable energy, or purchase an equivalent Green
        Co-investment (GCI) instrument.
      </Paragraph>
      <Paragraph sx={{ fontSize: 1, mt: 30 }}>
        Built by{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="http://twitter.com/islandHODL"
        >
          @islandHODL
        </Link>
        <br />
        Inspired by{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="https://twitter.com/thetrocro"
        >
          Troy Cross
        </Link>{" "}
        &amp;{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="https://twitter.com/resistancemoney"
        >
          Andrew M. Bailey
        </Link>{" "}
        at{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="https://www.resistance.money/green/"
        >
          Resistance.money
        </Link>
      </Paragraph>
    </>
  );
};
export const getStaticProps: GetStaticProps<HomeProps> = async () => {
  const getHashRate = await fetch("https://blockchain.info/q/hashrate");
  const hashRate = await getHashRate.json();

  const getTotalSupply = await fetch("https://blockchain.info/q/totalbc");
  const totalSupply = await getTotalSupply.json();

  return {
    props: {
      hashRate: hashRate ? hashRate / 1000 : 0,
      totalSupply: totalSupply ? totalSupply / 100000000 : 21000000,
    },
    revalidate: 20,
  };
};

export default Home;
