import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";

import { addMonths } from "date-fns";
import {
  Container,
  Heading,
  Paragraph,
  Flex,
  Input,
  Box,
  Link,
} from "theme-ui";

import { GetStaticProps, GetStaticPropsContext } from "next";
import gciCalculator from "../utils/calculator";

type HomeProps = {
  hashRate: number;
  totalSupply: number;
};

const Home: NextPage<HomeProps> = (props) => {
  const [btc, setBtc] = useState(100);

  // const [hashRate, setHashRate] = useState(props.hashRate);

  // const [lostCoins, setLostCoins] = useState(3000000);

  const {
    hashRateToMine,
    percentOfSupply,
    s19Count,
    effectiveTotal,
    s19Hashrate,
    lostCoins,
  } = gciCalculator({
    btcHoldings: btc,
    totalSupply: props.totalSupply,
    hashRate: props.hashRate,
  });

  return (
    <>
      <Head>
        <title>Green your Bitcoin</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="max-w-4xl mx-auto text-gray-600 body-font overflow-hidden">
        <div className="container px-5 py-24 mx-auto">
          <div className="flex flex-col text-center w-full mb-20">
            <h1 className="sm:text-4xl text-3xl font-medium title-font mb-2 text-gray-900">
              Green your Bitcoin
            </h1>
            <p className="lg:w-2/3 mx-auto leading-relaxed text-base text-gray-500">
              What is this? Read the{" "}
              <a
                target={"_blank"}
                rel="noreferrer"
                href="https://www.resistance.money/green/"
              >
                white paper
              </a>{" "}
              at resistance.money to learn more.
            </p>
            <div className="flex mx-auto border-2 border-teal-500 rounded overflow-hidden mt-6">
              <button className="py-1 px-4 bg-teal-500 text-white focus:outline-none">
                BTC
              </button>
              <button className="py-1 px-4 focus:outline-none">USD</button>
            </div>
          </div>
          <div className="flex flex-wrap -m-4">
            <div className="p-4 xl:w-1/2 md:w-1/2 w-full">
              <div className="h-full p-6 rounded-lg border-2 border-teal-500 flex flex-col relative overflow-hidden">
                <span className="bg-teal-500 text-white px-3 py-1 tracking-widest text-xs absolute right-0 top-0 rounded-bl">
                  START HERE
                </span>
                <h2 className="text-sm tracking-widest title-font mb-1 font-medium">
                  BITCOIN HOLDINGS
                </h2>
                <h1 className="text-5xl text-gray-900 leading-none flex items-center pb-4 mb-4 border-b border-gray-200">
                  <input
                    className="m-0 block w-full text-5xl text-gray-900  p-0 border-0  focus:ring-0 "
                    type={"number"}
                    value={btc}
                    onChange={(e) => setBtc(parseFloat(e.currentTarget.value))}
                  />
                  {/* <span className="text-lg ml-1 font-normal text-gray-500">
                    BTC
                  </span> */}
                </h1>
                <p className="flex items-center text-gray-600 mb-2">
                  <span className="w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0">
                    <svg
                      fill="none"
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2.5"
                      className="w-3 h-3"
                      viewBox="0 0 24 24"
                    >
                      <path d="M20 6L9 17l-5-5"></path>
                    </svg>
                  </span>
                  {props.totalSupply.toLocaleString()} BTC mined to date
                </p>
                <p className="flex items-center text-gray-600 mb-2">
                  <span className="w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0">
                    <svg
                      fill="none"
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2.5"
                      className="w-3 h-3"
                      viewBox="0 0 24 24"
                    >
                      <path d="M20 6L9 17l-5-5"></path>
                    </svg>
                  </span>
                  {lostCoins.toLocaleString()} BTC assumed lost
                </p>
                <p className="flex items-center text-gray-600 mb-2">
                  <span className="w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0">
                    <svg
                      fill="none"
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2.5"
                      className="w-3 h-3"
                      viewBox="0 0 24 24"
                    >
                      <path d="M20 6L9 17l-5-5"></path>
                    </svg>
                  </span>
                  {effectiveTotal.toLocaleString()} BTC effectively in supply
                </p>
                <p className="flex items-center text-gray-600 mb-6">
                  <span className="w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0">
                    <svg
                      fill="none"
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2.5"
                      className="w-3 h-3"
                      viewBox="0 0 24 24"
                    >
                      <path d="M20 6L9 17l-5-5"></path>
                    </svg>
                  </span>
                  {percentOfSupply}% of supply
                </p>
              </div>
            </div>
            <div className="p-4 xl:w-1/2 md:w-1/2 w-full">
              <div className="h-full p-6 rounded-lg border-2 border-gray-300 flex flex-col relative overflow-hidden">
                <h2 className="text-sm tracking-widest title-font mb-1 font-medium">
                  INCENTIVISED HASHRATE
                </h2>
                <h1 className="text-5xl text-gray-900 leading-none flex items-center pb-4 mb-4 border-b border-gray-200">
                  <span>{Math.round(hashRateToMine).toLocaleString()}</span>
                  <span className="text-lg ml-1 font-normal text-gray-500">
                    TH/s
                  </span>
                </h1>
                <p className="flex items-center text-gray-600 mb-2">
                  <span className="w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0">
                    <svg
                      fill="none"
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2.5"
                      className="w-3 h-3"
                      viewBox="0 0 24 24"
                    >
                      <path d="M20 6L9 17l-5-5"></path>
                    </svg>
                  </span>
                  {props.hashRate.toLocaleString()} TH/s 90 day moving average
                  of global hashrate
                </p>
                <p className="flex items-center text-gray-600 mb-2">
                  <span className="w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0">
                    <svg
                      fill="none"
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2.5"
                      className="w-3 h-3"
                      viewBox="0 0 24 24"
                    >
                      <path d="M20 6L9 17l-5-5"></path>
                    </svg>
                  </span>
                  Tumeric plaid portland
                </p>
                <p className="flex items-center text-gray-600 mb-2">
                  <span className="w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0">
                    <svg
                      fill="none"
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2.5"
                      className="w-3 h-3"
                      viewBox="0 0 24 24"
                    >
                      <path d="M20 6L9 17l-5-5"></path>
                    </svg>
                  </span>
                  Hexagon neutra unicorn
                </p>
                <p className="flex items-center text-gray-600 mb-2">
                  <span className="w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0">
                    <svg
                      fill="none"
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2.5"
                      className="w-3 h-3"
                      viewBox="0 0 24 24"
                    >
                      <path d="M20 6L9 17l-5-5"></path>
                    </svg>
                  </span>
                  Vexillologist pitchfork
                </p>
                <p className="flex items-center text-gray-600 mb-6">
                  <span className="w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0">
                    <svg
                      fill="none"
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2.5"
                      className="w-3 h-3"
                      viewBox="0 0 24 24"
                    >
                      <path d="M20 6L9 17l-5-5"></path>
                    </svg>
                  </span>
                  Mixtape chillwave tumeric
                </p>
              </div>
            </div>
          </div>
        </div>
      </section>

      <Paragraph sx={{ my: 20 }}>
        What is this? Read the{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="https://www.resistance.money/green/"
        >
          white paper
        </Link>{" "}
        at resistance.money to learn more.
      </Paragraph>
      <Paragraph>Your BTC holdings:</Paragraph>
      <Flex sx={{ alignItems: "center", mb: 20 }}>
        <Input
          sx={{
            width: 200,
          }}
          min={0}
          max={props.totalSupply}
          type="number"
          value={btc}
          onChange={(e) => setBtc(parseFloat(e.currentTarget.value))}
        />
        <Paragraph ml={10}>BTC</Paragraph>
      </Flex>
      <Flex sx={{ mb: 20 }}>
        <Box sx={{ mr: 20 }}>
          <Paragraph>Total BTC supply:</Paragraph>
          <Paragraph>{props.totalSupply.toLocaleString()}</Paragraph>
        </Box>
        <Box>
          <Paragraph>Coins assumed lost:</Paragraph>
          <Paragraph>{lostCoins.toLocaleString()}</Paragraph>
        </Box>
      </Flex>
      <Paragraph>Effective total BTC supply:</Paragraph>
      <Heading sx={{ mb: 20 }}>{effectiveTotal.toLocaleString()}</Heading>
      <Paragraph>Of which you hold:</Paragraph>
      <Heading sx={{ mb: 20 }}>
        <b>{percentOfSupply}%</b>
      </Heading>

      <Paragraph>3 month average global hashrate:</Paragraph>
      <Heading>{props.hashRate.toLocaleString()} TH/s</Heading>
      <Paragraph sx={{ mt: 20 }}>Your holdings incentivise:</Paragraph>
      <Heading>
        <b>{hashRateToMine.toLocaleString()}</b> TH/s
      </Heading>
      <Paragraph>
        Or {Math.round(s19Count).toLocaleString()} Antminer s19 Pros at{" "}
        {s19Hashrate} TH/s
      </Paragraph>
      <Paragraph sx={{ mt: 20 }}>
        To ensure your BTC holdings are carbon neutral you can mine this amount
        or more with renewable energy, or purchase an equivalent Green
        Co-investment (GCI) instrument.
      </Paragraph>
      <Paragraph sx={{ fontSize: 1, mt: 30 }}>
        Hashrate from{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="http://twitter.com/glassnode"
        >
          @glassnode
        </Link>
        <br />
        Built by{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="http://twitter.com/islandHODL"
        >
          @islandHODL
        </Link>
        <br />
        Inspired by{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="https://twitter.com/thetrocro"
        >
          Troy Cross
        </Link>{" "}
        &amp;{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="https://twitter.com/resistancemoney"
        >
          Andrew M. Bailey
        </Link>{" "}
        at{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="https://www.resistance.money/green/"
        >
          Resistance.money
        </Link>
      </Paragraph>
    </>
  );
};
export const getStaticProps: GetStaticProps<HomeProps> = async () => {
  if (!process.env.GLASSNODE_API_KEY)
    return {
      props: {
        hashRate: 0,
        totalSupply: 0,
      },
    };

  const url = new URL(
    "https://api.glassnode.com/v1/metrics/mining/hash_rate_mean"
  );

  const params = {
    i: "1month",
    a: "btc",
    s: Math.round(addMonths(new Date(), -3).getTime() / 1000).toString(),
    api_key: process.env.GLASSNODE_API_KEY,
  };

  url.search = new URLSearchParams(params).toString();

  const getHashRate = await fetch(url.toString());

  console.log(params.s);

  const hashRate = await getHashRate.json();

  const averageHashRate = hashRate
    ? Math.round(
        (hashRate as any[])
          .map((m) => m.v as number)
          .reduce((partial_sum, a) => partial_sum + a, 0) / 3
      )
    : 0;

  console.log(hashRate, averageHashRate);

  const getTotalSupply = await fetch("https://blockchain.info/q/totalbc");
  const totalSupply = await getTotalSupply.json();

  return {
    props: {
      hashRate: averageHashRate
        ? Math.round(averageHashRate / 1000000000000)
        : 0,
      totalSupply: totalSupply ? totalSupply / 100000000 : 21000000,
    },
    revalidate: 20,
  };
};

export default Home;
