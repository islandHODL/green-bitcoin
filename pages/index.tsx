import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";

import { addMonths } from "date-fns";
import {
  Container,
  Heading,
  Paragraph,
  Flex,
  Input,
  Box,
  Link,
  Card,
} from "theme-ui";

import { GetStaticProps, GetStaticPropsContext } from "next";
import gciCalculator from "../utils/calculator";

type HomeProps = {
  hashRate: number;
  totalSupply: number;
};

const Home: NextPage<HomeProps> = (props) => {
  const [btc, setBtc] = useState(100);

  // const [hashRate, setHashRate] = useState(props.hashRate);

  // const [lostCoins, setLostCoins] = useState(3000000);

  const {
    hashRateToMine,
    percentOfSupply,
    s19Count,
    effectiveTotal,
    s19Hashrate,
    lostCoins,
  } = gciCalculator({
    btcHoldings: btc,
    totalSupply: props.totalSupply,
    hashRate: props.hashRate,
  });

  return (
    <>
      <Head>
        <title>Green your Bitcoin</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Heading
        sx={{
          color: "primary",
          fontFamily: "heading",
          fontSize: "40px",
          my: "4rem",
          mb: "3rem",
          textAlign: "center",
        }}
      >
        Green your Bitcoin
      </Heading>
      {/* <Paragraph sx={{ pb: 20 }}>
        This is a demo, the calculations are not yet accurate
      </Paragraph> */}
      <Paragraph sx={{ my: 20, textAlign: "center" }}>
        What is this? Read the{" "}
        <Link
          target={"_blank"}
          rel="noreferrer"
          href="https://www.resistance.money/green/"
        >
          white paper
        </Link>{" "}
        at resistance.money to learn more.
      </Paragraph>
      <Card sx={{ border: "1px solid grey", borderRadius: "10px", p: "20px" }}>
        <Box
          sx={{
            textAlign: "center",
            flex: "0 0 50%",
            borderBottom: "1px solid grey",
          }}
        >
          <Paragraph>Enter your bitcoin holdings</Paragraph>

          <Heading>
            <Input
              sx={{
                width: "100%",
                border: "0px",
                ":focus": {
                  outline: "0px",
                },

                display: "block",
                textAlign: "center",
                fontSize: "50px",
                fontWeight: "bold",
                p: 0,
                m: 0,
                mx: "auto",
                mt: "5px",
              }}
              min={0}
              max={props.totalSupply}
              type="number"
              value={btc}
              onChange={(e) => setBtc(parseFloat(e.currentTarget.value))}
            />
          </Heading>
        </Box>
        <Box sx={{ mt: "20px", textAlign: "center" }}>
          <Paragraph>{btc.toLocaleString()} btc incentivises</Paragraph>
          <Heading>
            <b>{hashRateToMine.toLocaleString()}</b>
            <small>TH/s of mining</small>
          </Heading>
          <Paragraph>
            Or {Math.round(s19Count).toLocaleString()} Antminer s19 Pros at{" "}
            {s19Hashrate} TH/s
          </Paragraph>
        </Box>
      </Card>

      <Heading sx={{ textAlign: "center", mt: "20px" }}>
        How is this calculated?
      </Heading>

      <Box sx={{ textAlign: "center" }}>
        <Paragraph>
          Given a total BTC supply of{" "}
          <b>{props.totalSupply.toLocaleString()}</b> btc
          <br />
          and if we assume <b>{lostCoins.toLocaleString()}</b> btc to be lost.
          <br />
          This leaves an effective total supply of
        </Paragraph>
        <Heading>
          {effectiveTotal.toLocaleString()} <small>btc</small>
        </Heading>
        <Paragraph>of which you hold:</Paragraph>
        <Heading sx={{ mb: 20 }}>
          <b>{percentOfSupply}%</b>
        </Heading>

        <Paragraph>
          Applying this percentage to the 3 month average global hashrate of:
        </Paragraph>
        <Heading>{props.hashRate.toLocaleString()} TH/s</Heading>
        <Paragraph sx={{ mt: 20 }}>
          gives us the hashrate that your holdings incentivise:
        </Paragraph>
        <Heading>
          <b>{hashRateToMine.toLocaleString()}</b> TH/s
        </Heading>
        <Paragraph>
          Or {Math.round(s19Count).toLocaleString()} Antminer s19 Pros at{" "}
          {s19Hashrate} TH/s
        </Paragraph>
        <Paragraph sx={{ mt: 20 }}>
          To ensure your BTC holdings are carbon neutral you can mine this
          amount or more with renewable energy, or purchase an equivalent Green
          Co-investment (GCI) instrument.
        </Paragraph>

        <Paragraph sx={{ fontSize: 1, mt: 30 }}>
          Hashrate from{" "}
          <Link
            target={"_blank"}
            rel="noreferrer"
            href="http://twitter.com/glassnode"
          >
            @glassnode
          </Link>
          <br />
          Built by{" "}
          <Link
            target={"_blank"}
            rel="noreferrer"
            href="http://twitter.com/islandHODL"
          >
            @islandHODL
          </Link>
          <br />
          Inspired by{" "}
          <Link
            target={"_blank"}
            rel="noreferrer"
            href="https://twitter.com/thetrocro"
          >
            Troy Cross
          </Link>{" "}
          &amp;{" "}
          <Link
            target={"_blank"}
            rel="noreferrer"
            href="https://twitter.com/resistancemoney"
          >
            Andrew M. Bailey
          </Link>{" "}
          at{" "}
          <Link
            target={"_blank"}
            rel="noreferrer"
            href="https://www.resistance.money/green/"
          >
            Resistance.money
          </Link>
        </Paragraph>
      </Box>
    </>
  );
};
export const getStaticProps: GetStaticProps<HomeProps> = async () => {
  if (!process.env.GLASSNODE_API_KEY)
    return {
      props: {
        hashRate: 0,
        totalSupply: 0,
      },
    };

  const url = new URL(
    "https://api.glassnode.com/v1/metrics/mining/hash_rate_mean"
  );

  const params = {
    i: "1month",
    a: "btc",
    s: Math.round(addMonths(new Date(), -3).getTime() / 1000).toString(),
    api_key: process.env.GLASSNODE_API_KEY,
  };

  url.search = new URLSearchParams(params).toString();

  const getHashRate = await fetch(url.toString());

  console.log(params.s);

  const hashRate = await getHashRate.json();

  const averageHashRate = hashRate
    ? (hashRate as any[])
        .map((m) => m.v as number)
        .reduce((partial_sum, a) => partial_sum + a, 0) / 3
    : 0;

  console.log(hashRate, averageHashRate);

  const getTotalSupply = await fetch("https://blockchain.info/q/totalbc");
  const totalSupply = await getTotalSupply.json();

  return {
    props: {
      hashRate: averageHashRate ? averageHashRate / 1000000000000 : 0,
      totalSupply: totalSupply ? totalSupply / 100000000 : 21000000,
    },
    revalidate: 20,
  };
};

export default Home;
